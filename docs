It looks like you're outlining the structure of a simple Express application that interacts with a MongoDB database for managing recipes. Below is an example implementation based on the routes you've provided:

### Express App Setup

1. **Install Dependencies**: First, ensure you have `express` and `mongoose` installed in your project.

```bash
npm install express mongoose body-parser
```

2. **Create the Express Server**: Below is a basic setup of the Express server with the MongoDB connection and route handling.

```javascript
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(bodyParser.json());

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/recipesDB', { useNewUrlParser: true, useUnifiedTopology: true });

// Recipe Schema
const recipeSchema = new mongoose.Schema({
    name: String,
    ingredients: [String],
    instructions: String,
});

const Recipe = mongoose.model('Recipe', recipeSchema);

// Routes

// Fetch all recipes
app.get('/recipes', async (req, res) => {
    try {
        const recipes = await Recipe.find();
        res.status(200).json(recipes);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Create a new recipe
app.post('/recipes', async (req, res) => {
    const recipe = new Recipe(req.body);
    try {
        const newRecipe = await recipe.save();
        res.status(201).json(newRecipe);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// Update a recipe by ID
app.put('/recipes/:id', async (req, res) => {
    try {
        const recipe = await Recipe.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!recipe) return res.status(404).json({ message: 'Recipe not found' });
        res.status(200).json(recipe);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// Delete a recipe by ID
app.delete('/recipes/:id', async (req, res) => {
    try {
        const recipe = await Recipe.findByIdAndDelete(req.params.id);
        if (!recipe) return res.status(404).json({ message: 'Recipe not found' });
        res.status(204).send();
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Start server
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
```

### Explanation of the Code

- **Dependencies**: We use `express` for the server, `mongoose` for MongoDB interaction, and `body-parser` to parse incoming request bodies in JSON format.
- **MongoDB Schema**: A simple schema for recipes that includes a name, ingredients, and instructions.
- **Routes**:
    - **GET /recipes**: Fetch all recipes from the database.
    - **POST /recipes**: Create a new recipe and save it to the database.
    - **PUT /recipes/:id**: Update an existing recipe by its ID.
    - **DELETE /recipes/:id**: Delete a recipe by its ID.

### Run Your Server
You can start your server by running:
```bash
node yourServerFile.js
```

Ensure that MongoDB is running and you have replaced `'mongodb://localhost:27017/recipesDB'` with your actual MongoDB connection string if you are using a hosted MongoDB service. 

You can use tools like Postman or cURL to test the API endpoints.